substitutions:
  name: muse-luxe
  friendly_name: Raspiaudio Muse Luxe
#States  
  P_waiting: "1"
  P_playing: "2"
  P_listening: "3"
  P_answering: "4"
  
esphome:
  name: ${name}
  friendly_name: ${friendly_name}
  min_version: 2024.9.1
  platformio_options:
    board_build.flash_mode: dio
    board_build.arduino.memory_type: qio_opi
  on_boot:
    priority: -100.0
    then:
      - light.turn_on:
          id: top_led
          effect: slow_pulse
          red: 100%
          green: 60%
          blue: 0%   
      - if:
         condition:
             switch.is_on: use_wake_word
         then:                     
           - micro_wake_word.start:    
            
external_components:
  - source: github://jnix85/esphomeLuxe@13feb2025
    components: [es8388]
    refresh: 0s
  - source:
      type: git
      url: https://github.com/gnumpi/esphome_audio
      ref: dev-next
    components: [ adf_pipeline, i2s_audio ]
    refresh: 0s  
        
esp32:
  board: esp-wrover-kit
  flash_size: 4MB
  framework:
    type: esp-idf
    version: 4.4.8
    platform_version: 5.4.0
    sdkconfig_options:
      CONFIG_ESP32S3_DEFAULT_CPU_FREQ_240: "y"
      CONFIG_ESP32S3_DATA_CACHE_64KB: "y"
      CONFIG_ESP32S3_DATA_CACHE_LINE_64B: "y"
  
      
micro_wake_word:
  id: mww
  models:
#    - model: okay_nabu
#      id: okat_nabu
    - model: hey_jarvis
#      id: hey_jarvis
#    - model: hey_mycroft
#      id: hey_mycroft
#    - model: alexa
#      id: alexa  
  vad:
  microphone: luxe_mic
  on_wake_word_detected:        
    - voice_assistant.start:
        wake_word: !lambda return wake_word;       
               
ota:
  platform: esphome
  
api:

wifi:
  power_save_mode: none
  output_power: 15
  ap:
     ssid: "Raspiaudio-luxe"
     password: "12345678"

captive_portal:
                
#improv_serial: 

logger:
   level: DEBUG

##########
# Hardware Configuration
es8388:
 
psram:
  mode: octal
  speed: 80MHz

#######
# Buses Configuration
i2c:
  sda: GPIO18
  scl: GPIO23
  id: i2c_bus

#####################
# Internal Components
output:
  - platform: gpio
    id: dac_mute
    pin:
      number: GPIO21
      inverted: true
      mode:
        output: true
       
globals:

  - id: Vol
    type: float
    initial_value: '0.3'    
  - id: phase
    type: int
    initial_value: '1'    
  - id: mute  
    type: bool
    initial_value: 'false'        
        
switch:
  - platform: template
    name: Use Wake Word
    id: use_wake_word
    optimistic: true
    restore_mode: RESTORE_DEFAULT_ON
    on_turn_on:
      - micro_wake_word.start:
      - script.execute: reset_led
    on_turn_off:
      - micro_wake_word.stop:
      - script.execute: reset_led             
             


sensor:
  - platform: adc
    pin: GPIO33
    name: Battery voltage
    device_class: voltage
    unit_of_measurement: "V"
    accuracy_decimals: 2
    state_class: measurement
    entity_category: diagnostic
    update_interval: 15s
    attenuation: auto
    filters:
      - multiply: 2 # https://forum.raspiaudio.com/t/esp-muse-luxe-bluetooth-speaker/294/12
      - exponential_moving_average:
          alpha: 0.2
          send_every: 2
      - delta: 0.002
    on_value:
      then:
        - sensor.template.publish:
            id: battery_percent
            state: !lambda "return x;"

  - platform: template
    name: Battery
    id: battery_percent
    device_class: battery
    unit_of_measurement: "%"
    accuracy_decimals: 0
    state_class: measurement
    entity_category: diagnostic
    update_interval: 15s
    filters:
      - calibrate_polynomial:
          degree: 3
          datapoints:
            - 4.58 -> 100.0
            - 4.5 -> 97.1
            - 4.47 -> 94.2
            - 4.44 -> 88.4
            - 4.42 -> 82.7
            - 4.41 -> 76.9
            - 4.41 -> 71.1
            - 4.37 -> 65.3
            - 4.35 -> 59.5
            - 4.31 -> 53.8
            - 4.28 -> 48.0
            - 4.26 -> 42.2
            - 4.23 -> 36.4
            - 4.21 -> 30.6
            - 4.19 -> 24.9
            - 4.16 -> 19.1
            - 4.1 -> 13.3
            - 4.07 -> 10.4
            - 4.03 -> 7.5
            - 3.97 -> 4.6
            - 3.82 -> 1.7
            - 3.27 -> 0.0
      - lambda: return clamp(x, 0.0f, 100.0f);   
      
binary_sensor:
  - platform: gpio
    pin:
      number: GPIO19
      inverted: true
      mode:
        input: true
        pullup: true
    name: Volume Up
    on_click:
        - lambda: |-       
                id(Vol) += 0.02;
                if(id(Vol) > 1) id(Vol) = 1;            
        - media_player.volume_set: 
                id: luxe_media_player        
                volume: !lambda return id(Vol);         
         
  - platform: gpio
    pin:
      number: GPIO32
      inverted: true
      mode:
        input: true
        pullup: true
    name: Volume Down
    on_click:
        - lambda: |-       
                id(Vol) -= 0.02;
                if(id(Vol) < 0) id(Vol) = 0;            
        - media_player.volume_set: 
                id: luxe_media_player        
                volume: !lambda return id(Vol);              
      
  - platform: gpio
    pin:
      number: GPIO12
      inverted: true
      mode:
        input: true
        pullup: true
    name: Action
    on_click:       
      - if:
          condition:
            and:
               - switch.is_off: use_wake_word
               - lambda: 'return(id(phase) != 2);'            
          then:
            - if:
                condition: voice_assistant.is_running
                then:
                  - voice_assistant.stop:
                  - script.execute: reset_led
                else:
                  - voice_assistant.start:
# STOP                                   
      - if:
         condition:
            lambda: 'return(id(phase) == 2);'
         then:        
          - media_player.stop: 


light:
  - platform: esp32_rmt_led_strip
    name: None
    id: top_led
    pin: GPIO22
    chipset: SK6812
    num_leds: 1
    rgb_order: grb
    rmt_channel: 0
    default_transition_length: 0s
    gamma_correct: 2.8
    effects:
      - pulse:
          name: pulse
          transition_length: 250ms
          update_interval: 250ms
      - pulse:
          name: slow_pulse
          transition_length: 1s
          update_interval: 2s

    
i2s_audio:
  - id: i2s_shared
    i2s_lrclk_pin: GPIO25
    i2s_bclk_pin: GPIO5
    i2s_mclk_pin: GPIO0
    access_mode: duplex 
    
  
microphone:
  - platform: adf_pipeline
    id: luxe_mic
    keep_pipeline_alive: true
    pipeline:
      - adf_i2s_in
      - resampler
      - self 
      
adf_pipeline:
  - platform: i2s_audio
    type: audio_out
    id: adf_i2s_out
    i2s_audio_id: i2s_shared
    i2s_dout_pin: GPIO26
    sample_rate: 48000
    bits_per_sample: 16bit
    fixed_settings: false
    
  - platform: i2s_audio
    type: audio_in
    id: adf_i2s_in
    pdm: false
    i2s_audio_id: i2s_shared
    i2s_din_pin: GPIO35
    sample_rate: 24000 
    fixed_settings: false     
    
media_player:
  - platform: adf_pipeline
    id: luxe_media_player
    name: luxe_media_player
    internal: false
    keep_pipeline_alive: true
    announcement_audio:
      sample_rate: 24000
      bits_per_sample: 16
      num_channels: 1
    pipeline:
      - self
      - resampler
      - adf_i2s_out  
    on_play: 
    
      - if:
         condition:
             switch.is_on: use_wake_word
         then:                     
           - micro_wake_word.stop:    
      - if:
           condition:
                lambda: 'return(id(phase) != 2);'
           then:           
              - lambda: |-
                   if(id(phase) == 1)  id(phase) = 2;    
              - script.execute: mute_off         
              - script.execute: reset_led    
              
    on_idle:
      - if:
          condition:              
              lambda: 'return((id(phase) == 4) || (id(phase) == 2));'
          then:
            - lambda: |-
                 id(phase) = 1; 
      - if:
         condition:
             switch.is_on: use_wake_word
         then:                     
           - micro_wake_word.start:                                                
      - script.execute: reset_led     
                
voice_assistant:
    id: va
    microphone: luxe_mic
    media_player: luxe_media_player
    use_wake_word: false         
      
    on_listening:
     - light.turn_on:
        id: top_led
        blue: 100%
        red: 0%
        green: 0%
        brightness: 100%
        effect: pulse  
        
     - if:
         condition:
             switch.is_off: use_wake_word
         then:                        
           - micro_wake_word.stop:
     - lambda: |-
        id(phase) = 3;                      
#     - script.execute: reset_led
       
    on_stt_end:
     - media_player.play_media: !lambda return x;
     - light.turn_on:
        id: top_led
        blue: 60%
        red: 20%
        green: 20%
        effect: pulse
#     - script.execute: reset_led
     
    on_tts_start:
     - light.turn_on:
        id: top_led
        blue: 60%
        red: 20%
        green: 20%
        effect: none                    
     - lambda: |-
        id(phase) = 4;
#     - script.execute: reset_led
         
    on_error:
     - light.turn_on:
        id: top_led
        blue: 0%
        red: 100%
        green: 0%
        effect: none
     - delay: 1s
     - script.execute: reset_led
     - script.wait: reset_led
     - lambda: |-
        if (code == "wake-provider-missing" || code == "wake-engine-missing") {
          id(use_wake_word).turn_off();
        }

#########
# Scripts

script:         
  - id: reset_led
    then:
      - if:
          condition:
            switch.is_on: use_wake_word
          then:
            - light.turn_on:
                id: top_led
                blue: 100%
                red: 100%
                green: 0%
                brightness: 100%
                effect: none
          else:
            - light.turn_off: top_led   
            
  - id: mute_on
    then:
       - media_player.volume_set:
            volume: '0'
       - lambda: id(mute) = true;
       
  - id: mute_off
    then:
       - media_player.volume_set:
            volume: !lambda return(id(Vol));
       - lambda: id(mute) = false;             
            
            
            
      
      
                    
